{"version":3,"sources":["SimpleStorage.jsx","Components/Header.jsx","Helpers/helper.js","Components/AddProject.jsx","Components/EthereumCard.jsx","Components/ProjectCard.jsx","Components/ProjectList.jsx","Components/Loader.jsx","Components/Landing.jsx","Components/Modal.jsx","Components/Backers.jsx","Components/ChartBar.jsx","Components/ProjectDetails.jsx","App.jsx","index.js"],"names":["ethereum","window","contractAbi","abi","getEtheriumContract","signer","ethers","providers","Web3Provider","getSigner","Contract","isWallectConnected","alert","request","method","accounts","length","console","log","connectWallet","createProject","title","description","imageURL","cost","expiresAt","contract","utils","parseEther","loadProjects","location","reload","getProjects","projects","loadProject","id","getProject","project","updateProject","backProject","amount","connectedAccount","contribute","from","value","_hex","getBackers","backers","Header","useState","toggler","setToggler","walledConnected","setWalletConnected","navigate","useNavigate","toggleNavbar","useEffect","timer","setInterval","run","clearInterval","className","onClick","icon","faXmark","faBars","addressShortner","address","slice","convertDate","unix","Date","toLocaleDateString","convertHexToDecimal","parseInt","projectStatus","statusNumber","AddProject","props","edit","activeProject","imageUrl","validDate","formData","setFormData","useParams","editTitle","editDescription","editImageURL","editCost","formatEther","editExpiresAt","date","UnixToDate","extractYear","getFullYear","extractMonth","getMonth","extractDate","getDate","toString","properDateFormat","prevState","handleChange","event","target","name","toTimestamp","strDate","parse","onFormSubmit","preventDefault","editProjectParams","newProjectParams","onSubmit","htmlFor","type","placeholder","required","onChange","rows","step","min","EthereumCard","setAccountConnected","walletAddress","setWalletAddress","data","fontSize","color","ProjectCard","owner","raised","status","src","alt","ProjectList","listOfProjects","setListOfProjects","fetchProjects","response","map","index","arrayify","backer","Loader","class","Landing","acountConnected","Fragment","Modal","children","Backers","fundedDate","ChartBar","barFillHeight","totalCost","Math","round","collectedCost","style","height","expires","ProjectDetails","modal","setModal","fundValue","setFundValue","setProject","userAddress","setUserAddress","projectBackers","setProjectBackers","modalRef","useRef","setActiveProject","current","toggleHandler","contains","document","addEventListener","removeEventListener","onFundFormSubmit","reset","backersList","contribution","timestamp","toLowerCase","ref","App","path","element","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"649hBAIQA,EAAaC,OAAbD,SAEFE,EAAcC,EAAIA,IAElBC,EAAsB,WACxB,IACMC,EADW,IAAIC,IAAOC,UAAUC,aAAaR,GAC3BS,YAExB,OADiB,IAAIH,IAAOI,SANR,6CAMkCR,EAAaG,EAEtE,EAEKM,EAAkB,iDAAG,iGAClBX,EADkB,yCACDY,MAAM,4BADL,uBAEAZ,EAASa,QAAQ,CAAEC,OAAQ,iBAF3B,YAEjBC,EAFiB,QAIVC,OAJU,yCAKdD,EAAS,IALK,cAOrBE,QAAQC,IAAI,sBAPS,kBAQd,8BARc,4CAAH,qDAYlBC,EAAa,iDAAG,0GAEbnB,EAFa,yCAEIY,MAAM,4BAFV,uBAGKZ,EAASa,QAAQ,CAAEC,OAAQ,wBAHhC,OAGZC,EAHY,OAIlBE,QAAQC,IAAI,oBAAqBH,EAAS,IAJxB,gDAMlBE,QAAQC,IAAR,MANkB,yDAAH,qDAUbE,EAAa,iDAAG,4GACpBC,EADoB,EACpBA,MACAC,EAFoB,EAEpBA,YACAC,EAHoB,EAGpBA,SACAC,EAJoB,EAIpBA,KACAC,EALoB,EAKpBA,UALoB,SAQbzB,EARa,yCAQIY,MAAM,4BARV,cAUZc,EAAWtB,IACjBoB,EAAOlB,IAAOqB,MAAMC,WAAWJ,GAXb,SAYZE,EAASN,cAAcC,EAAOC,EAAaC,EAAUC,EAAMC,GAZ/C,wBAcZI,IAdY,QAelB5B,OAAO6B,SAASC,SAChBd,QAAQC,IAAI,gCAhBM,kDAkBlBD,QAAQC,IAAR,MAlBkB,0DAAH,sDAsBbW,EAAY,iDAAG,4GAEZ7B,EAFY,yCAEKY,MAAM,4BAFX,cAIXc,EAAWtB,IAJA,SAKMsB,EAASM,cALf,cAKXC,EALW,yBAMVA,GANU,kCAQlBhB,QAAQC,IAAR,MARkB,0DAAH,qDAYZgB,EAAW,iDAAG,WAAOC,GAAP,+FAEXnC,EAFW,yCAEMY,MAAM,4BAFZ,cAGVc,EAAWtB,IAHD,SAIIsB,EAASU,WAAWD,GAJxB,cAIZE,EAJY,yBAQTA,GARS,kCAUhBpB,QAAQC,IAAR,MAVgB,0DAAH,sDAcXoB,EAAa,iDAAG,4GACpBH,EADoB,EACpBA,GACAd,EAFoB,EAEpBA,MACAC,EAHoB,EAGpBA,YACAC,EAJoB,EAIpBA,SACAE,EALoB,EAKpBA,UALoB,SAQbzB,EARa,yCAQIY,MAAM,4BARV,cAUZc,EAAWtB,IAVC,SAWZsB,EAASY,cAAcH,EAAId,EAAOC,EAAaC,EAAUE,GAX7C,uDAgBnBR,QAAQC,IAAR,MAhBmB,yDAAH,sDAoBbqB,EAAW,iDAAG,WAAOJ,EAAIK,GAAX,+FAEXxC,EAFW,yCAEMY,MAAM,4BAFZ,uBAGeD,IAHf,cAGV8B,EAHU,OAIVf,EAAWtB,IACjBoC,EAASlC,IAAOqB,MAAMC,WAAWY,GALjB,UAOVd,EAASgB,WAAWP,EAAI,CAC5BQ,KAAMF,EACNG,MAAOJ,EAAOK,OATA,0DAehB5B,QAAQC,IAAR,MAfgB,0DAAH,wDAmBX4B,EAAU,iDAAG,WAAOX,GAAP,+FAEVnC,EAFU,yCAEOY,MAAM,4BAFb,cAGTc,EAAWtB,IAHF,SAIKsB,EAASoB,WAAWX,GAJzB,cAIXY,EAJW,yBAKRA,GALQ,kCAQf9B,QAAQC,IAAR,MARe,0DAAH,sD,+BCrED8B,EA/CA,WACb,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8CF,oBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACMC,EAAWC,cAEXC,EAAe,WACnBL,GAAYD,EACb,EAoBD,OAlBAO,qBAAU,WAAM,sDAEd,wGACqB9C,IADrB,UAEe,+BAFf,8BAGI0C,GAAmB,GAHvB,0BAMEA,GAAmB,GANrB,4CAFc,sBAWd,IAAMK,EAAQC,aAAY,YAXZ,mCAYZC,EACD,GAAE,KAEH,OAAO,kBAAMC,cAAcH,EAApB,CACR,IAGC,sBAAKI,UAAU,SAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,iBAAiBC,QAAS,kBAAMT,EAAS,IAAf,EAAxC,6BAEF,sBAAKQ,UAAS,yBAAoBZ,EAAU,cAAgB,IAA5D,UACE,wBAAQa,QAAS5C,EAAjB,SAAiCiC,EAAkB,YAAc,wBAChEA,GACC,wBAAQW,QAAS,kBAAMT,EAAS,eAAf,EAAjB,4BAIHJ,EACC,cAAC,IAAD,CAAiBc,KAAMC,IAASH,UAAU,UAAUC,QAASP,IAC7D,cAAC,IAAD,CAAiBQ,KAAME,IAAQJ,UAAU,UAAUC,QAASP,MAInE,E,gBCrDKW,EAAkB,SAAEC,GAIxB,OAHqBA,EAAQC,MAAM,EAAE,GAEG,SADpBD,EAAQC,OAAO,EAGpC,EAEKC,EAAc,SAAEC,GAEpB,OADW,IAAIC,KAAY,IAAPD,GACRE,oBACb,EAQKC,EAAsB,SAAE9B,GAC5B,OAAO+B,SAAS/B,EAAO,GACxB,EAGKgC,EAAgB,SAAEC,GACtB,OAAOA,GACL,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,WACT,KAAK,EACH,MAAO,WACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UAEZ,EC2KcC,G,MAvMI,SAACC,GAClB,IAAQC,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,cAEd,EAAgChC,mBAAS,CACvC5B,MAAO,GACPC,YAAa,GACb4D,SAAU,GACV1D,KAAM,GACN2D,UAAW,KALb,mBAAOC,EAAP,KAAiBC,EAAjB,KAQM/B,EAAWC,cAETpB,EAAOmD,cAAPnD,GAGRsB,qBAAU,WACR,GAAIuB,GAAQC,EAAe,CAEzB,IAAIM,EAAS,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAe5D,MAC3BmE,EAAe,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAe3D,YACjCmE,EAAY,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAeC,SAC9BQ,EAAWpF,IAAOqB,MAAMgE,YAAb,OAAyBV,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAezD,KAAKqB,MACxD+C,EDnBS,SAACrB,GAClB,IAAIsB,EAAO,IAAIrB,KAAY,IAAPD,GAEpB,OADAtD,QAAQC,IAAI,YAAa2E,GAClBA,CACR,CCeyBC,CAAWb,EAAcxD,UAAUoB,MAGnDkD,EAAcH,EAAcI,cAC5BC,EAAeL,EAAcM,WAC7BC,EAAcP,EAAcQ,WAChCH,EAAetB,SAASsB,GAAgB,GAGvBI,WAAWrF,QAAU,IACpCiF,EAAe,IAAMtB,SAASsB,GAC9BhF,QAAQC,IAAI,yBAA0B+E,IAEpCE,EAAYE,WAAWrF,QAAU,IACnCmF,EAAc,IAAMA,GAEtBlF,QAAQC,IAAI,yBAA0B+E,GAEtC,IAAIK,EAAgB,UAAMP,EAAN,YAAqBE,EAArB,YAAqCE,GAGzDd,GAAY,SAAAkB,GAAS,kCAChBA,GADgB,IAEnBlF,MAAOkE,EACPjE,YAAakE,EACbN,SAAUO,EACVjE,KAAMkE,EACNP,UAAWmB,GANQ,GAQtB,CACF,GAAE,IAIH,IAAME,EAAe,SAACC,GACpBpB,GAAY,SAAAkB,GAAS,kCAChBA,GADgB,kBAElBE,EAAMC,OAAOC,KAAOF,EAAMC,OAAO9D,OAFf,GAItB,EAIKgE,EAAc,SAACC,GAEnB,OADcrC,KAAKsC,MAAMD,GACV,GAChB,EAGKE,EAAY,iDAAG,WAAON,GAAP,sFACnBA,EAAMO,iBACN/F,QAAQC,IAAIkE,GAFO,UAKbJ,EALa,wBAOTiC,EAAoB,CACxB9E,GAAIA,EACJd,MAAO+D,EAAS/D,MAChBC,YAAa8D,EAAS9D,YACtBG,UAAWmF,EAAYxB,EAASD,WAChC5D,SAAU6D,EAASF,UAZN,SAeT5C,EAAc2E,GAfL,OAgBfhG,QAAQC,IAAI,gCACZoC,EAAS,KAjBM,+BAqBT4D,EAAmB,CACvB7F,MAAO+D,EAAS/D,MAChBC,YAAa8D,EAAS9D,YACtBE,KAAM4D,EAAS5D,KACfC,UAAWmF,EAAYxB,EAASD,WAChC5D,SAAU6D,EAASF,UA1BN,UA6BT9D,EAAc8F,GA7BL,QA8BfjG,QAAQC,IAAI,iCACZoC,EAAS,KA/BM,0DAkCjBrC,QAAQC,IAAR,MAlCiB,0DAAH,sDAsClB,OACE,qBAAK4C,UAAU,uBAAf,SAEE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,UAAf,SACIkB,EAQA,sCAAQ,0CAAR,QAAgC,2CAAhC,YAA6D,8CAP7D,yCACE,0CADF,YAGE,6CAHF,sBAKE,kDAMN,qBAAKlB,UAAU,iBAAf,SAEE,uBAAMqD,SAAUJ,EAAhB,UAEE,sBAAKjD,UAAU,cAAf,UACE,uBAAOsD,QAAQ,QAAf,mBACA,uBAAOC,KAAK,OACVlF,GAAG,QACHwE,KAAK,QACL/D,MAAOwC,EAAS/D,MAChBiG,YAAY,gBACZC,UAAQ,EACRC,SAAUhB,OAGd,sBAAK1C,UAAU,cAAf,UACE,uBAAOsD,QAAQ,cAAf,yBACA,0BAAUC,KAAK,OACbI,KAAK,IACLtF,GAAG,cACHwE,KAAK,cACL/D,MAAOwC,EAAS9D,YAChBgG,YAAY,sBACZC,UAAQ,EACRC,SAAUhB,OAGd,sBAAK1C,UAAU,cAAf,UACE,uBAAOsD,QAAQ,WAAf,uBACA,uBAAOC,KAAK,MACVlF,GAAG,WACHwE,KAAK,WACL/D,MAAOwC,EAASF,SAChBoC,YAAY,sBACZC,UAAQ,EACRC,SAAUhB,OAGd,sBAAK1C,UAAU,cAAf,UACE,uBAAOsD,QAAQ,OAAf,kBACA,uBAAOC,KAAK,SACVK,KAAK,OACLC,IAAI,QACJxF,GAAG,OACHwE,KAAK,OACL/D,MAAQqC,EAAgB3E,IAAOqB,MAAMgE,YAAb,OAAyBV,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAezD,KAAKqB,MAAQuC,EAAS5D,KACtF8F,YAAY,WACZE,SAAUhB,EACVe,UAAQ,OAIZ,sBAAKzD,UAAU,cAAf,UACE,uBAAOsD,QAAQ,OAAf,kBACA,uBAAOC,KAAK,OACVlF,GAAG,OACHwE,KAAK,YACL/D,MAAOwC,EAASD,UAChBoC,UAAQ,EACRC,SAAUhB,OAGd,wBAAQ1C,UAAU,qBAAqBuD,KAAK,SAA5C,SAAuDrC,EAAO,iBAAmB,4BAQ5F,G,gBC5Jc4C,G,MAzCM,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBACrB,EAA0C5E,mBAAS,8BAAnD,mBAAO6E,EAAP,KAAsBC,EAAtB,KAsBA,OArBA9G,QAAQC,IAAI,iBAAkB4G,GAE9BrE,qBAAU,WAAM,sDAEd,8GACqB9C,IADrB,UACQqH,EADR,OAEED,EAAiBC,GACJ,+BAATA,EAHN,uBAIIH,GAAoB,GAJxB,0BAOEA,GAAoB,GAPtB,4CAFc,sBAYd,IAAMnE,EAAQC,aAAY,YAZZ,mCAaZC,EACD,GAAE,KAEH,OAAO,kBAAMC,cAAcH,EAApB,CACR,IAGC,sBAAKI,UAAU,mDAAf,UACE,qBAAKA,UAAU,WAAf,SACE,cAAC,IAAD,CAAYmE,SAAU,GAAIC,MAAM,WAElC,qBAAKpE,UAAU,gBAAf,SACE,cAAC,IAAD,CAAcmE,SAAU,GAAIC,MAAM,WAEpC,qBAAKpE,UAAU,gBAAf,SACE,2CAEF,qBAAKA,UAAU,mBAAf,SACE,yCAAYK,EAAgB,GAAD,OAAI2D,WAItC,GCLcK,G,MArCK,SAACpD,GACnB,IAAO1D,EAAwE0D,EAAxE1D,MAAW+G,GAA6DrD,EAAjE5C,GAAiE4C,EAA7DqD,OAAO3G,EAAsDsD,EAAtDtD,UAAWD,EAA2CuD,EAA3CvD,KAAM6G,EAAqCtD,EAArCsD,OAAQtF,EAA6BgC,EAA7BhC,QAASxB,EAAoBwD,EAApBxD,SAAU+G,EAAUvD,EAAVuD,OAErE,OACE,sBAAKxE,UAAU,wBAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,qBAAKyE,IAAKhH,EAAUiH,IAAI,cAE1B,qBAAK1E,UAAU,aAAf,SACE,4BAAIzC,MAEN,sBAAKyC,UAAU,sBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,+BACA,cAAC,IAAD,CAAYmE,SAAU,GAAIC,MAAM,WAEhC,+BAAOE,OAET,qBAAKtE,UAAU,YAAf,SACE,8BAAIrC,EAAJ,qBAGJ,sBAAKqC,UAAU,6BAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,8BAAIuE,EAAJ,IAAY,4CAEd,kCACA,qBAAKvE,UAAU,kBAAf,SACE,8BAAItC,EAAJ,IAAU,+CAGZ,oBAAGsC,UAAU,kBAAb,UAAgCf,EAAhC,eACA,oBAAGe,UAAU,iBAAb,UAA8B,8CAAwBc,EAAc0D,QAG3E,GCecG,G,MA3CK,WAClB,MAA4CxF,qBAA5C,mBAAOyF,EAAP,KAAuBC,EAAvB,KACMrF,EAAWC,cAkBjB,OAhBAE,qBAAU,WACR,IAAMmF,EAAa,iDAAG,uHAEK/G,IAFL,QAEZgH,EAFY,UAIjBF,EAAkBE,GAClB5H,QAAQC,IAAI,qBAAsB2H,IALjB,gDAQlB5H,QAAQC,IAAR,MARkB,yDAAH,qDAWnB0H,GACD,GAAE,IAID,qBAAK9E,UAAU,yBAAf,gBAEG4E,QAFH,IAEGA,OAFH,EAEGA,EAAgBI,KAAK,SAACzG,EAAS0G,GAAV,OAEpB,qBAAiBhF,QAAS,kBAAMT,EAAS,oBAAD,OAAqBoB,EAAoBrC,EAAQF,GAAGU,OAAlE,EAA1B,SACE,cAAC,EAAD,CAAaxB,MAAOgB,EAAQhB,MAC1Bc,GAAIuC,EAAoBrC,EAAQF,GAAGU,MACnCuF,MAAOjE,EAAgB9B,EAAQ+F,OAC/B3G,UAAW6C,EAAYjC,EAAQZ,UAAUoB,MACzCrB,KAAMlB,IAAOqB,MAAMgE,YAAYtD,EAAQb,KAAKqB,MAC5CwF,OAAQ/H,IAAOqB,MAAMgE,YAAYtD,EAAQgG,OAAOxF,MAChDE,QAASzC,IAAOqB,MAAMqH,SAAS3G,EAAQ4G,OAAOpG,MAAM,GACpDtB,SAAUc,EAAQ6C,SAClBoD,OAAQjG,EAAQiG,UATVS,EAFU,KAkB3B,GCzCcG,G,MATA,WACb,OACE,qBAAKpF,UAAU,mBAAf,SAEE,qBAAKqF,MAAM,mBAGhB,GCsBcC,G,MA1BC,WAEd,MAA+CnG,oBAAS,GAAxD,mBAAOoG,EAAP,KAAwBxB,EAAxB,KAEA,OACE,eAAC,IAAMyB,SAAP,WAEA,sBAAKxF,UAAU,yBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,gBAAd,8BACA,6CAAe,iDAAf,QAA8C,4CAA9C,+BAEF,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,CAAc+D,oBAAqBA,SAIrCwB,EACE,cAAC,EAAD,IACA,cAAC,EAAD,MAKP,GCpBcE,EARD,SAAExE,GACd,IAAQyE,EAAazE,EAAbyE,SAER,OACE,8BAAOA,GAEV,ECWcC,G,MAhBC,SAAC1E,GACf,IAAQqD,EAA4BrD,EAA5BqD,MAAO5G,EAAqBuD,EAArBvD,KAAMkI,EAAe3E,EAAf2E,WAGrB,OADAzI,QAAQC,IAAKwI,GAEX,eAAC,IAAMJ,SAAP,WACE,sBAAKxF,UAAU,eAAf,UACE,mBAAGA,UAAU,iBAAb,SAA+BsE,IAC/B,oBAAGtE,UAAU,gBAAb,UAA8BtC,EAA9B,UACA,mBAAGsC,UAAU,mBAAb,SAAiC4F,OAEnC,oBAAI5F,UAAU,6BAGnB,GCUc6F,G,YAxBE,SAAA5E,GACf,IAAI6E,EAAgB,KAKpB,OAJG7E,EAAM8E,UAAY,IACnBD,EAAgBE,KAAKC,MAAOhF,EAAMiF,cAAgBjF,EAAM8E,UAAa,KAAO,KAI5E,sBAAK/F,UAAU,QAAf,UAEA,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,qBAAKA,UAAU,kBAAkBmG,MAAO,CAAEC,OAAQN,SAGtD,sBAAK9F,UAAU,eAAf,UACE,8BAAG,sBAAMA,UAAU,wBAAhB,uBAAyDiB,EAAM8E,UAAlE,UACA,8BAAG,sBAAM/F,UAAU,wBAAhB,wBAAH,IAA8DiB,EAAMhC,WACpE,8BAAG,sBAAMe,UAAU,wBAAhB,wBAA0DiB,EAAMoF,WACnE,8BAAG,sBAAMrG,UAAU,wBAAhB,0BAA4DiB,EAAMiF,cAArE,eAIL,GC6IcI,EAzJQ,SAACrF,GACtB,MAA0B9B,oBAAS,GAAnC,mBAAOoH,EAAP,KAAcC,EAAd,KACA,EAAkCrH,mBAAS,IAA3C,mBAAOsH,EAAP,KAAkBC,EAAlB,KACA,EAA8BvH,qBAA9B,mBAAOZ,EAAP,KAAgBoI,EAAhB,KACA,EAAsCxH,qBAAtC,mBAAOyH,EAAP,KAAoBC,EAApB,KACA,EAA4C1H,qBAA5C,mBAAO2H,EAAP,KAAuBC,EAAvB,KACIC,EAAWC,mBAMPC,EAAqBjG,EAArBiG,iBACA7I,EAAOmD,cAAPnD,GACFmB,EAAWC,cAGjBE,qBAAU,WACR,IAAMmF,EAAa,iDAAG,2HAEK1G,EAAYC,GAFjB,YAEZ0G,EAFY,gCAKhB4B,EAAW5B,GACXmC,EAAiBnC,GACjB5H,QAAQC,IAAI,gBAAiB2H,GAPb,UAQMlI,IARN,eAQVyD,EARU,SAUduG,EAAevG,GAVD,UAYMtB,EAAWX,GAZjB,QAYVY,EAZU,OAahB8H,EAAkB9H,GAClB9B,QAAQC,IAAI,qBAAsB6B,GAdlB,0DAiBlB9B,QAAQC,IAAR,MAjBkB,0DAAH,qDAqBnB0H,GAED,GAAE,CAACzG,IAGJsB,qBAAU,WACR,GAAIqH,EAASG,QAAS,CACpB,IAAIC,EAAgB,SAAAzE,GACbqE,EAASG,QAAQE,SAAS1E,EAAMC,SACnC4D,GAAS,EAEZ,EAID,OAHAc,SAASC,iBAAiB,YAAaH,GAGhC,kBACLE,SAASE,oBAAoB,YAAaJ,EADrC,CAGR,CACF,IAED,IAAMK,EAAgB,iDAAG,WAAO9E,GAAP,kFACvBA,EAAMO,iBACN/F,QAAQC,IAAI,iBAAkBqJ,GAFP,SAGjBhI,EAAYJ,EAAIoI,GAHC,OAIvB9D,EAAMC,OAAO8E,QACblI,EAAS,KALc,2CAAH,sDAShBmI,EAAc,qBAAK3H,UAAU,iBAAf,gBACjB8G,QADiB,IACjBA,OADiB,EACjBA,EAAgB9B,KAAI,SAACG,EAAQF,GAAT,OACnB,cAAC,EAAD,CAAS5G,GAAI4G,EAEXX,MAAOa,EAAOA,OACdzH,KAAMlB,IAAOqB,MAAMgE,YAAYsD,EAAOyC,aAAa7I,MACnD6G,WAAYpF,EAAY2E,EAAO0C,UAAU9I,OAHpCkG,EAFY,MAWvB,OAAK1G,EAMH,qBAAKyB,UAAU,kBAAf,SACE,sBAAKA,UAAU,4BAAf,UACE,qBAAKA,UAAU,wBAAf,SACE,qBAAKyE,IAAG,OAAElG,QAAF,IAAEA,OAAF,EAAEA,EAAS6C,SAAUsD,IAAI,0BAEnC,oBAAI1E,UAAU,wBAAd,gBAAuCzB,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAShB,QAChD,sBAAKyC,UAAU,uBAAf,UACE,oBAAIA,UAAU,sBAAd,yBACA,qBAAKA,UAAU,qBAAf,SAEE,mBAAGA,UAAU,cAAb,gBAA4BzB,QAA5B,IAA4BA,OAA5B,EAA4BA,EAASf,mBAGzC,sBAAKwC,UAAU,wBAAf,UACE,oBAAIA,UAAU,gBAAd,mBACA,mBAAGA,UAAU,gBAAb,gBAA8BzB,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAS+F,WAEzC,sBAAKtE,UAAU,uBAAf,UACE,oBAAIA,UAAU,eAAd,sBACA,oBAAGA,UAAU,aAAb,UAA2BzB,EAAU/B,IAAOqB,MAAMgE,YAAb,OAAyBtD,QAAzB,IAAyBA,OAAzB,EAAyBA,EAASb,KAAKqB,MAAQ,GAApF,aAIF,oBAAIiB,UAAU,wBAAd,mBACA,cAAC,EAAD,CAAU+F,UAAWxH,EAAU/B,IAAOqB,MAAMgE,YAAb,OAAyBtD,QAAzB,IAAyBA,OAAzB,EAAyBA,EAASb,KAAKqB,MAAQ,GAC5EmH,cAAe3H,EAAU/B,IAAOqB,MAAMgE,YAAb,OAAyBtD,QAAzB,IAAyBA,OAAzB,EAAyBA,EAASgG,OAAOxF,MAAQ,GAC1EE,QAASV,EAAU/B,IAAOqB,MAAMqH,SAAb,OAAsB3G,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAS4G,OAAOpG,MAAM,GAAK,GACpEsH,QAAS9H,EAAUiC,EAAYjC,EAAQZ,UAAUoB,MAAQ,KAI1DR,GAA6B,GAAlBA,EAAQiG,SAAe,OAACjG,QAAD,IAACA,OAAD,EAACA,EAAS+F,OAAOwD,eAAiBlB,GACnE,sBAAK5G,UAAU,4BAAf,UACE,wBAAQA,UAAU,wBAAwBC,QAAS,kBAAMT,EAAS,iBAAD,OAAkBnB,GAAhC,EAAnD,oBACA,wBAAQ2B,UAAU,wBAAlB,uBAGHzB,GAA6B,GAAlBA,EAAQiG,SAAe,OAACjG,QAAD,IAACA,OAAD,EAACA,EAAS+F,OAAOwD,gBAAkBlB,GACpE,wBAAQ5G,UAAU,sBAAsBC,QArH9B,WAChBuG,GAAS,EACV,EAmHO,kBAKDD,GACC,cAAC,EAAD,UACE,sBAAKvG,UAAU,eAAf,UACE,qBAAKA,UAAU,aACf,sBAAK+H,IAAKf,EAAUhH,UAAU,kBAA9B,UACE,oBAAIA,UAAU,cAAd,gBAA6BzB,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAShB,QACtC,uBAAM8F,SAAUoE,EAAhB,UACE,uBAAOlE,KAAK,SAASV,KAAK,OAAOe,KAAK,QAAQC,IAAI,SAAS/E,MAAO2H,EAAWjD,YAAY,YAAYE,SAAU,SAACf,GAAD,OAAW+D,EAAa/D,EAAMC,OAAO9D,MAArC,IAC/G,wBAAQyE,KAAK,SAASvD,UAAU,uBAAhC,gCAST8G,EAAiBa,EAAc,QAjE7B,cAAC,EAAD,GAqEV,ECzIcK,MAjBf,WACE,MAA4C7I,mBAAS,CAAC,GAAtD,mBAAQgC,EAAR,KAAuB+F,EAAvB,KAGA,OACE,eAAC,IAAM1B,SAAP,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyC,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,eAAeC,QAAS,cAAC,EAAD,CAAYhH,MAAM,MACtD,cAAC,IAAD,CAAO+G,KAAK,uBAAuBC,QAAS,cAAC,EAAD,CAAgBhB,iBAAkBA,MAC9E,cAAC,IAAD,CAAOe,KAAK,oBAAoBC,QAAS,cAAC,EAAD,CAAY/G,cAAeA,EAAeD,MAAM,WAIhG,E,MCnBYiH,IAASC,WAAWd,SAASe,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,Q","file":"static/js/main.6d4b583c.chunk.js","sourcesContent":["import abi from './contracts/SimpleStorage.json'\r\nimport { ethers } from 'ethers'\r\n\r\n\r\nconst { ethereum } = window\r\nconst contractAddress = '0x7d82d9ecfA46AE57fe8BEAE3FCbC5A2d1981586F'\r\nconst contractAbi = abi.abi\r\n\r\nconst getEtheriumContract = () => {\r\n    const provider = new ethers.providers.Web3Provider(ethereum)\r\n    const signer = provider.getSigner()\r\n    const contract = new ethers.Contract(contractAddress, contractAbi, signer)\r\n    return contract\r\n}\r\n\r\nconst isWallectConnected = async () => {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' })\r\n\r\n    if (accounts.length) {\r\n      return accounts[0]\r\n    } else {\r\n      console.log('No accounts found.')\r\n      return '0x000000000000000000000000'\r\n    }\r\n}\r\n\r\nconst connectWallet = async () => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n    const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\r\n    console.log('account connected', accounts[0])\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nconst createProject = async ({\r\n  title,\r\n  description,\r\n  imageURL,\r\n  cost,\r\n  expiresAt,\r\n}) => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n\r\n    const contract = getEtheriumContract()\r\n    cost = ethers.utils.parseEther(cost)\r\n    await contract.createProject(title, description, imageURL, cost, expiresAt)\r\n\r\n    await loadProjects() // The blockchain is too slow for this...\r\n    window.location.reload() // That's why we used this...\r\n    console.log('Project creation successfull');\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nconst loadProjects = async () => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n\r\n    const contract = getEtheriumContract()\r\n    const projects = await contract.getProjects()\r\n    return projects;\r\n  } catch (error) {\r\n   console.log(error)\r\n  }\r\n}\r\n\r\nconst loadProject = async (id) => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n    const contract = getEtheriumContract()\r\n    let project = await contract.getProject(id)\r\n\r\n    // await getBackers(id)\r\n    // console.log(\"Project Loaded...\", project)\r\n    return project;\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nconst updateProject = async ({\r\n  id,\r\n  title,\r\n  description,\r\n  imageURL,\r\n  expiresAt,\r\n}) => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n\r\n    const contract = getEtheriumContract()\r\n    await contract.updateProject(id, title, description, imageURL, expiresAt)\r\n\r\n    // await loadProjects() // The blockchain is too slow for this...\r\n    // window.location.reload() // That's why we used this...\r\n  } catch (error) {\r\n   console.log(error)\r\n  }\r\n}\r\n\r\nconst backProject = async (id, amount) => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n    const connectedAccount = await isWallectConnected()\r\n    const contract = getEtheriumContract()\r\n    amount = ethers.utils.parseEther(amount)\r\n\r\n    await contract.contribute(id, {\r\n      from: connectedAccount,\r\n      value: amount._hex,\r\n    })\r\n\r\n    // await loadProjects() // The blockchain is too slow for this...\r\n    // window.location.reload() // That's why we used this...\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nconst getBackers = async (id) => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n    const contract = getEtheriumContract()\r\n    let backers = await contract.getBackers(id)\r\n    return backers;\r\n\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport {\r\n  getEtheriumContract,\r\n  isWallectConnected,\r\n  connectWallet,\r\n  createProject,\r\n  loadProjects,\r\n  loadProject,\r\n  updateProject,\r\n  backProject,\r\n  getBackers\r\n}","import React, { useState } from 'react';\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { connectWallet, isWallectConnected } from '../SimpleStorage';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars, faXmark } from '@fortawesome/free-solid-svg-icons'\r\nimport '../styles/Header.css';\r\nimport { useEffect } from 'react';\r\n\r\nconst Header = () => {\r\n  const [toggler, setToggler] = useState(false);\r\n  const [walledConnected, setWalletConnected] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const toggleNavbar = () => {\r\n    setToggler(!toggler);\r\n  }\r\n\r\n  useEffect(() => {\r\n    // To get the value instead of javascript promise object\r\n    async function run() {\r\n      const data = await isWallectConnected();\r\n      if (data !== '0x000000000000000000000000') {\r\n        setWalletConnected(true);\r\n        return;\r\n      }\r\n      setWalletConnected(false);\r\n    }\r\n\r\n    const timer = setInterval(() => {\r\n      run();\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer)\r\n  })\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-text\">\r\n        <h1 className=\"header-heading\" onClick={() => navigate('/')}>Crowd Funding</h1>\r\n      </div>\r\n      <div className={`header-buttons ${toggler ? ' responsive' : ''}`}>\r\n        <button onClick={connectWallet}>{walledConnected ? 'Connected' : 'Connect To MetaMask'}</button>\r\n        {walledConnected &&\r\n          <button onClick={() => navigate(\"/add-project\")}>Add Project</button>\r\n        }\r\n\r\n      </div>\r\n      {toggler ?\r\n        <FontAwesomeIcon icon={faXmark} className=\"toggler\" onClick={toggleNavbar} /> :\r\n        <FontAwesomeIcon icon={faBars} className=\"toggler\" onClick={toggleNavbar} />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","const addressShortner = ( address ) => {\r\n  const firstLetters = address.slice(0,6);\r\n  const lastLetters = address.slice(-6);\r\n  const shortenedAddress = firstLetters + '......' + lastLetters;\r\n  return shortenedAddress;\r\n}\r\n\r\nconst convertDate = ( unix ) => {\r\n  let date = new Date(unix * 1000);\r\n  return date.toLocaleDateString()\r\n}\r\n\r\nconst UnixToDate = (unix) => {\r\n  let date = new Date(unix * 1000);\r\n  console.log('i am date', date)\r\n  return date;\r\n}\r\n\r\nconst convertHexToDecimal = ( value ) => {\r\n  return parseInt(value, 16);\r\n}\r\n\r\n\r\nconst projectStatus = ( statusNumber ) => {\r\n  switch(statusNumber){\r\n    case 0:\r\n      return 'Open';\r\n    case 1:\r\n      return 'Approved';\r\n    case 2: \r\n      return 'Reverted';\r\n    case 3:\r\n      return 'Deleted';\r\n    case 4:\r\n      return 'Paidout'\r\n  }\r\n}\r\n\r\nexport {\r\n  addressShortner,\r\n  convertDate,\r\n  convertHexToDecimal,\r\n  UnixToDate,\r\n  projectStatus\r\n}","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { createProject, updateProject } from '../SimpleStorage';\r\nimport { UnixToDate } from '../Helpers/helper';\r\nimport { ethers } from 'ethers';\r\nimport '../styles/AddProject.css'\r\n\r\nconst AddProject = (props) => {\r\n  const { edit, activeProject } = props;\r\n\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    description: '',\r\n    imageUrl: '',\r\n    cost: '',\r\n    validDate: '',\r\n  })\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { id } = useParams();\r\n\r\n\r\n  useEffect(() => {\r\n    if (edit && activeProject) {\r\n      // Extract fields from the updating project\r\n      let editTitle = activeProject?.title;\r\n      let editDescription = activeProject?.description;\r\n      let editImageURL = activeProject?.imageUrl;\r\n      let editCost = ethers.utils.formatEther(activeProject?.cost._hex);\r\n      let editExpiresAt = UnixToDate(activeProject.expiresAt._hex)\r\n\r\n      // Extract Year, Month and Date separately\r\n      let extractYear = editExpiresAt.getFullYear();\r\n      let extractMonth = editExpiresAt.getMonth();\r\n      let extractDate = editExpiresAt.getDate();\r\n      extractMonth = parseInt(extractMonth) + 1;\r\n\r\n      // If the length of Month or Day is 1, then add a leading zero infront of it\r\n      if (extractMonth.toString().length <= 1) {\r\n        extractMonth = '0' + parseInt(extractMonth)\r\n        console.log('The required month is ', extractMonth)\r\n      }\r\n      if (extractDate.toString().length <= 1) {\r\n        extractDate = '0' + extractDate;\r\n      }\r\n      console.log('The required month is ', extractMonth)\r\n      // Converting it to proper date format\r\n      let properDateFormat = `${extractYear}-${extractMonth}-${extractDate}`\r\n\r\n      // Updating state of the form data\r\n      setFormData(prevState => ({\r\n        ...prevState,\r\n        title: editTitle,\r\n        description: editDescription,\r\n        imageUrl: editImageURL,\r\n        cost: editCost,\r\n        validDate: properDateFormat\r\n      }))\r\n    }\r\n  }, [])\r\n\r\n\r\n  // Handle Chnage on htmlForm and update state\r\n  const handleChange = (event) => {\r\n    setFormData(prevState => ({\r\n      ...prevState,\r\n      [event.target.name]: event.target.value\r\n    }))\r\n  }\r\n\r\n\r\n  // convert date to valid unix timestamp.\r\n  const toTimestamp = (strDate) => {\r\n    const datum = Date.parse(strDate)\r\n    return datum / 1000\r\n  }\r\n\r\n\r\n  const onFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formData);\r\n\r\n    try {\r\n      if (edit) {\r\n\r\n        const editProjectParams = {\r\n          id: id,\r\n          title: formData.title,\r\n          description: formData.description,\r\n          expiresAt: toTimestamp(formData.validDate),\r\n          imageURL: formData.imageUrl\r\n        }\r\n\r\n        await updateProject(editProjectParams);\r\n        console.log('Project edited from frontend')\r\n        navigate('/');\r\n\r\n      } else {\r\n\r\n        const newProjectParams = {\r\n          title: formData.title,\r\n          description: formData.description,\r\n          cost: formData.cost,\r\n          expiresAt: toTimestamp(formData.validDate),\r\n          imageURL: formData.imageUrl\r\n        }\r\n        \r\n        await createProject(newProjectParams);\r\n        console.log('Project created from frontend')\r\n        navigate('/');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"fullscreen-container\">\r\n\r\n      <div className=\"container\">\r\n        <div className=\"heading\">\r\n          {!edit ?\r\n            <h1>Time to\r\n              <span> Fund </span>\r\n              your next\r\n              <span> Project </span>\r\n              and convert it into\r\n              <span> Reality </span>\r\n            </h1> :\r\n            <h1>You <span>live ,</span> you <span>learn ,</span> and you <span>upgrade</span></h1>\r\n          }\r\n        </div>\r\n\r\n        <div className=\"form-container\">\r\n\r\n          <form onSubmit={onFormSubmit}>\r\n\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"Title\">Title</label>\r\n              <input type=\"text\"\r\n                id=\"Title\"\r\n                name=\"title\"\r\n                value={formData.title}\r\n                placeholder=\"Playstation 5\"\r\n                required\r\n                onChange={handleChange} />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"Description\">Description</label>\r\n              <textarea type=\"text\"\r\n                rows=\"6\"\r\n                id=\"Description\"\r\n                name=\"description\"\r\n                value={formData.description}\r\n                placeholder=\"Its the description\"\r\n                required\r\n                onChange={handleChange} />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"imageUrl\">Image Url</label>\r\n              <input type=\"url\"\r\n                id=\"imageUrl\"\r\n                name=\"imageUrl\"\r\n                value={formData.imageUrl}\r\n                placeholder=\"https://myImage.png\"\r\n                required\r\n                onChange={handleChange} />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"cost\">Cost</label>\r\n              <input type=\"number\"\r\n                step=\"0.01\"\r\n                min=\"0.001\"\r\n                id=\"cost\"\r\n                name=\"cost\"\r\n                value={ activeProject ? ethers.utils.formatEther(activeProject?.cost._hex) : formData.cost}\r\n                placeholder=\"0.01 eth\"\r\n                onChange={handleChange}\r\n                required\r\n                 />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <label htmlFor=\"Date\">Date</label>\r\n              <input type=\"date\"\r\n                id=\"Date\"\r\n                name=\"validDate\"\r\n                value={formData.validDate}\r\n                required\r\n                onChange={handleChange} />\r\n            </div>\r\n\r\n            <button className=\"form-submit-button\" type=\"submit\">{ edit ? 'Update Project' : 'Create Project'}</button>\r\n\r\n          </form>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddProject;\r\n","import React, { useState, useEffect} from 'react'\r\nimport { SiEthereum } from 'react-icons/si';\r\nimport { BsInfoCircle } from 'react-icons/bs';\r\nimport '../styles/EthereumCard.css';\r\nimport { addressShortner } from '../Helpers/helper'\r\nimport { isWallectConnected } from '../SimpleStorage';\r\n\r\n\r\nconst EthereumCard = ({setAccountConnected}) => {\r\n  const [walletAddress, setWalletAddress] = useState('0x000000000000000000000000')\r\n  console.log('wallet Address', walletAddress)\r\n\r\n  useEffect(() => {\r\n    // To get the value instead of javascript promise object\r\n    async function run() { \r\n      const data = await isWallectConnected();\r\n      setWalletAddress(data);\r\n      if( data !== '0x000000000000000000000000') {\r\n        setAccountConnected(true);\r\n        return ;\r\n      }\r\n      setAccountConnected(false);\r\n    }\r\n\r\n    const timer = setInterval(() => {\r\n      run();\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer)\r\n  })\r\n\r\n  return (\r\n    <div className=\"eth-card-container eth-card white-glassmorphism \">\r\n      <div className=\"eth-icon\">\r\n        <SiEthereum fontSize={40} color=\"#fff\" />\r\n      </div>\r\n      <div className=\"eth-help-icon\">\r\n        <BsInfoCircle fontSize={25} color=\"#fff\" />\r\n      </div>\r\n      <div className=\"ethereum-name\">\r\n        <p>Ethereum</p>\r\n      </div>\r\n      <div className=\"ethereum-address\">\r\n        <p>Address {addressShortner(`${walletAddress}`)}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EthereumCard;\r\n","import React from 'react'\r\nimport { projectStatus } from '../Helpers/helper';\r\nimport { SiEthereum } from 'react-icons/si';\r\nimport '../styles/ProjectCard.css'\r\n\r\nconst ProjectCard = (props) => {\r\n  const {title, id, owner, expiresAt, cost, raised, backers, imageURL, status} = props;\r\n\r\n  return (\r\n    <div className=\"projectCard-container\">\r\n      <div className=\"image-container\">\r\n        <img src={imageURL} alt=\"Project\" />\r\n      </div>\r\n      <div className=\"card-title\">\r\n        <p>{title}</p>\r\n      </div>\r\n      <div className=\"card-info-container\">\r\n        <div className=\"card-address\">\r\n          <span>\r\n          <SiEthereum fontSize={20} color=\"#fff\" />\r\n          </span> \r\n          <span>{owner}</span> \r\n        </div>\r\n        <div className=\"days-left\">\r\n          <p>{expiresAt} days left</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"collected-amount-container\">\r\n        <div className=\"collected-amount\">\r\n          <p>{raised} <span>Eth</span></p>\r\n        </div>\r\n        <p>/</p>\r\n        <div className=\"amount-required\">\r\n          <p>{cost} <span>Eth</span></p>\r\n        </div>\r\n      </div>\r\n        <p className=\"project-backing\">{backers} backings</p>\r\n        <p className=\"project-status\"><span>Status :- </span>{projectStatus(status)}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProjectCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ProjectCard from './ProjectCard';\r\nimport { loadProjects } from '../SimpleStorage';\r\nimport { ethers } from 'ethers';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { addressShortner, \r\n    convertDate, \r\n    convertHexToDecimal \r\n  } from '../Helpers/helper';\r\nimport '../styles/ProjectList.css';\r\n\r\n\r\nconst ProjectList = () => {\r\n  const [listOfProjects, setListOfProjects] = useState();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchProjects = async () => {\r\n      try {\r\n        const response = await loadProjects();\r\n        if( response ) {\r\n         setListOfProjects(response);\r\n         console.log('I am the projects ', response);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchProjects();\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"project-list-container\">\r\n\r\n      {listOfProjects?.map( (project, index) => (\r\n\r\n        <div key={index} onClick={() => navigate(`/project-details/${convertHexToDecimal(project.id._hex)}`)}>\r\n          <ProjectCard title={project.title}\r\n            id={convertHexToDecimal(project.id._hex)}\r\n            owner={addressShortner(project.owner)}\r\n            expiresAt={convertDate(project.expiresAt._hex)}\r\n            cost={ethers.utils.formatEther(project.cost._hex)}\r\n            raised={ethers.utils.formatEther(project.raised._hex)}\r\n            backers={ethers.utils.arrayify(project.backer._hex)[0]}\r\n            imageURL={project.imageUrl}\r\n            status={project.status}\r\n          />\r\n        </div>\r\n\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProjectList;\r\n","import React from 'react'\r\nimport '../styles/Loader.css'\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n\r\n      <div class=\"custom-loader\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader;\r\n","import React, {useState} from 'react';\r\nimport EthereumCard from './EthereumCard';\r\nimport ProjectList from './ProjectList';\r\nimport Loader from './Loader';\r\nimport '../styles/Landing.css';\r\n\r\nconst Landing = () => {\r\n\r\n  const [acountConnected, setAccountConnected] = useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n    <div className=\"landing-page-container\">\r\n      <div className=\"landing-text\">\r\n        <h1 className=\"text-gradient\">Invest in Future</h1>\r\n        <p> Welcome to <span> decentralize</span> and <span> secure </span>crowd funding platform</p>\r\n      </div>\r\n      <div className=\"landing-art\">\r\n        <EthereumCard setAccountConnected={setAccountConnected}/>\r\n      </div>\r\n      \r\n    </div>\r\n    { acountConnected ?\r\n        <ProjectList /> :\r\n        <Loader />\r\n    }\r\n    </React.Fragment>\r\n    \r\n  )\r\n}\r\n\r\nexport default Landing;\r\n","import React from 'react'\r\n\r\nconst Modal = ( props ) => {\r\n  const { children } = props;\r\n  \r\n  return (\r\n    <div>{ children }</div>\r\n  )\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport '../styles/Backers.css';\r\n\r\nconst Backers = (props) => {\r\n  const { owner, cost, fundedDate } = props\r\n\r\n  console.log( fundedDate);\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"backers-item\">\r\n        <p className=\"backer-address\">{owner}</p>\r\n        <p className=\"backer-amount\">{cost} Eth</p>\r\n        <p className=\"backer-timestamp\">{fundedDate}</p>\r\n      </div>\r\n      <hr className=\"backer-horizontal-line\" />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Backers;\r\n","import React from 'react';\r\nimport '../styles/ChartBar.css';\r\n\r\nconst ChartBar = props => {\r\n  let barFillHeight = '0%';\r\n  if(props.totalCost > 0){\r\n    barFillHeight = Math.round((props.collectedCost / props.totalCost) * 100) + '%';\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n\r\n    <div className='chart-bar'>\r\n      <div className='chart-bar__inner'>\r\n        <div className='chart-bar__fill' style={{ height: barFillHeight }}></div>\r\n      </div>\r\n    </div>\r\n    <div className=\"chart-amount\">\r\n      <p><span className=\"chart-amount-headings\">Target : </span>{props.totalCost} Eth</p>\r\n      <p><span className=\"chart-amount-headings\">Backers : </span> {props.backers}</p>\r\n      <p><span className=\"chart-amount-headings\">Expires : </span>{props.expires}</p>\r\n      <p><span className=\"chart-amount-headings\">Collected : </span>{props.collectedCost} Eth</p>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChartBar;","import React, { useState, useEffect, useRef } from 'react'\r\nimport Loader from './Loader';\r\nimport Modal from './Modal';\r\nimport Backers from './Backers';\r\nimport { useParams } from 'react-router-dom';\r\nimport { loadProject, backProject, getBackers } from '../SimpleStorage';\r\nimport { convertDate } from '../Helpers/helper';\r\nimport { ethers } from 'ethers';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { isWallectConnected } from '../SimpleStorage';\r\nimport '../styles/ProjectDetails.css';\r\nimport ChartBar from './ChartBar';\r\n\r\nconst ProjectDetails = (props) => {\r\n  const [modal, setModal] = useState(false);\r\n  const [fundValue, setFundValue] = useState('');\r\n  const [project, setProject] = useState()\r\n  const [userAddress, setUserAddress] = useState();\r\n  const [projectBackers, setProjectBackers] = useState();\r\n  let modalRef = useRef();\r\n\r\n  const openModal = () => {\r\n    setModal(true);\r\n  }\r\n\r\n  const { setActiveProject } = props;\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  // Get project by ID from the contract\r\n  useEffect(() => {\r\n    const fetchProjects = async () => {\r\n      try {\r\n        const response = await loadProject(id);\r\n        // console.log('Response from contract : ', response);\r\n        if (response) {\r\n          setProject(response);\r\n          setActiveProject(response);\r\n          console.log('I am response', response);\r\n          const address = await isWallectConnected();\r\n          if (address) {\r\n            setUserAddress(address);\r\n          }\r\n          const backers = await getBackers(id);\r\n          setProjectBackers(backers);\r\n          console.log('Project backers : ', backers)\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    fetchProjects();\r\n\r\n  }, [id])\r\n\r\n  // Handles the logic to close the modal by clicking anywhere outside the modal.\r\n  useEffect(() => {\r\n    if (modalRef.current) {\r\n      let toggleHandler = event => {\r\n        if (!modalRef.current.contains(event.target)) {\r\n          setModal(false)\r\n        }\r\n      }\r\n      document.addEventListener('mousedown', toggleHandler)\r\n\r\n      // Clean-up function\r\n      return () => (\r\n        document.removeEventListener('mousedown', toggleHandler)\r\n      )\r\n    }\r\n  })\r\n\r\n  const onFundFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log('Form value is ', fundValue);\r\n    await backProject(id, fundValue);\r\n    event.target.reset();\r\n    navigate('/');\r\n  }\r\n\r\n  // Renders the list of backers funding the project\r\n  const backersList = <div className='backer-portion'>\r\n    {projectBackers?.map((backer, index) => (\r\n      <Backers id={index}\r\n        key={index}\r\n        owner={backer.backer}\r\n        cost={ethers.utils.formatEther(backer.contribution._hex)}\r\n        fundedDate={convertDate(backer.timestamp._hex)}\r\n      />\r\n    ))}\r\n  </div>\r\n\r\n  // Display spinner if fetching takes time\r\n  if (!project) {\r\n    return <Loader />\r\n  }\r\n\r\n  // Return statement of the function\r\n  return (\r\n    <div className=\"project-details\">\r\n      <div className=\"project-details-container\">\r\n        <div className=\"project-details-image\">\r\n          <img src={project?.imageUrl} alt=\"Project description\" />\r\n        </div>\r\n        <h1 className=\"project-details-title\">{project?.title}</h1>\r\n        <div className=\"project-details-desc\">\r\n          <h2 className=\"description-heading\">Description</h2>\r\n          <div className=\"description-border\">\r\n\r\n            <p className=\"description\">{project?.description}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"project-details-owner\">\r\n          <h2 className=\"owner-heading\">Owner</h2>\r\n          <p className=\"owner-address\">{project?.owner}</p>\r\n        </div>\r\n        <div className=\"project-details-cost\">\r\n          <h2 className=\"cost-heading\">Required</h2>\r\n          <p className=\"cost-price\">{project ? ethers.utils.formatEther(project?.cost._hex) : ''} Eth</p>\r\n        </div>\r\n\r\n        {/* Display Stats of project */}\r\n        <h2 className=\"project-stats-heading\">Stats</h2>\r\n        <ChartBar totalCost={project ? ethers.utils.formatEther(project?.cost._hex) : ''} \r\n          collectedCost={project ? ethers.utils.formatEther(project?.raised._hex) : ''}\r\n          backers={project ? ethers.utils.arrayify(project?.backer._hex)[0] : ''}\r\n          expires={project ? convertDate(project.expiresAt._hex) : ''}\r\n        />\r\n\r\n        {/* Display control buttons */}\r\n        {project && project.status == 0 && (project?.owner).toLowerCase() == userAddress &&\r\n          <div className=\"details-buttons-container\">\r\n            <button className=\"details-update-button\" onClick={() => navigate(`/edit-project/${id}`)}>Update</button>\r\n            <button className=\"details-delete-button\">Delete</button>\r\n          </div>\r\n        }\r\n        {project && project.status == 0 && (project?.owner).toLowerCase() !== userAddress && \r\n          <button className=\"details-fund-button\" onClick={openModal}>Fund</button>\r\n        }\r\n\r\n        {/* Modal component Logic */}\r\n\r\n        {modal &&\r\n          <Modal>\r\n            <div className=\"modal-screen\">\r\n              <div className=\"backdrop\"></div>\r\n              <div ref={modalRef} className=\"modal-container\">\r\n                <h1 className=\"modal-title\">{project?.title}</h1>\r\n                <form onSubmit={onFundFormSubmit}>\r\n                  <input type=\"number\" name='fund' step=\"0.001\" min=\"0.0001\" value={fundValue} placeholder=\"0.001 Eth\" onChange={(event) => setFundValue(event.target.value)} />\r\n                  <button type=\"submit\" className=\"modal-confirm-button\">Confirm</button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </Modal>\r\n        }\r\n\r\n        {/* Display project backers */}\r\n\r\n        {projectBackers ? backersList : ''}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProjectDetails;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\n\r\nimport Header from './Components/Header';\r\nimport AddProject from './Components/AddProject';\r\nimport Landing from \"./Components/Landing\";\r\nimport ProjectDetails from './Components/ProjectDetails'\r\nimport Modal from \"./Components/Modal\";\r\n\r\n\r\nfunction App() {\r\n  const [ activeProject, setActiveProject ] = useState({});\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Landing />} />\r\n        <Route path=\"/add-project\" element={<AddProject edit={false} />} />\r\n        <Route path=\"/project-details/:id\" element={<ProjectDetails setActiveProject={setActiveProject} />} />\r\n        <Route path=\"/edit-project/:id\" element={<AddProject activeProject={activeProject} edit={true} />} />\r\n      </Routes>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}